@use "sass:map";
@use "../../elements/focus/focus";
@use "../../variables/theme";

/*
  BUTTON
  Generic button class can be used as a class on an element or as a mixin in scss.
*/

// Default Button Properties
$default-component-button-properties: (
  backgroundColor: theme.getThemeProperty(backgroundColorDark),
  textColor: theme.getThemeProperty(textColorLight),
  backgroundHoverColor: theme.getThemeProperty(backgroundColorLight),
  textHoverColor: theme.getThemeProperty(textColorDark),
  padding: 10px 40px,
  margin: 5px 0,
  border: none,
  borderRadius: 5px,
  textTransform: initial,
  fontWeight: 400,
  fontFamily: theme.getThemeProperty(fontText),
  fontSize: 1rem,
  textAlign: center,
  disabledColor: #dddddd,
  disabledTextColor: theme.getThemeProperty(textColorLight),
  lineHeight: inherit,
  variants: (
    white-btn: (
      background-color: theme.getThemeProperty(backgroundColorLight),
      color: theme.getThemeProperty(textColorDark),
      hoverStyle: (
        background-color: theme.getThemeProperty(primaryColor),
        color: theme.getThemeProperty(textColorLight),
      )
    )
  )
);
// If $component-button-properties is set, lets merge into our defaults
$component-button-properties: $default-component-button-properties !default;
@if ($component-button-properties) {
  $component-button-properties: theme.recursive-map-merge($default-component-button-properties, $component-button-properties);
}

// Button Mixin
@mixin button-input-style() {
  background-color: theme.getThemeProperty(backgroundColor, $component-button-properties);
  border-radius: theme.getThemeProperty(borderRadius, $component-button-properties);
  color: theme.getThemeProperty(textColor, $component-button-properties);
  display: inline-block;
  position: relative;
  text-decoration: none;
  padding: theme.getThemeProperty(padding, $component-button-properties);
  margin: theme.getThemeProperty(margin, $component-button-properties);
  border: theme.getThemeProperty(border, $component-button-properties);;
  cursor: pointer;
  text-transform: theme.getThemeProperty(textTransform, $component-button-properties);
  font-weight: theme.getThemeProperty(fontWeight, $component-button-properties);
  font-family: theme.getThemeProperty(fontFamily, $component-button-properties);
  font-size: theme.getThemeProperty(fontSize, $component-button-properties);
  line-height: theme.getThemeProperty(lineHeight, $component-button-properties);
  text-align: theme.getThemeProperty(textAlign, $component-button-properties);
  -webkit-appearance: none;
  -webkit-transition: background-color 0.25s ease-out;
  -moz-transition: background-color 0.25s ease-out;
  -o-transition: background-color 0.25s ease-out;
  transition: background-color 0.25s ease-out;
  &:link,
  &:visited,
  &:hover,
  &:active {
    color: theme.getThemeProperty(textColor, $component-button-properties);
  }
  &:hover {
    background-color: theme.getThemeProperty(backgroundHoverColor, $component-button-properties);
    color: theme.getThemeProperty(textHoverColor, $component-button-properties);
  }
  @include focus.focus-style;

  &.disabled {
    pointer-events: none;
    background: theme.getThemeProperty(disabledColor, $component-button-properties) !important;
    color: theme.getThemeProperty(disabledTextColor, $component-button-properties) !important;
  }

  // Define style rules for button variants
  @each $variantClass, $variantProperties in theme.getThemeProperty(variants, $component-button-properties) {
    &.#{$variantClass} {
      @each $styleRule, $styleValue in $variantProperties {
        @if ($styleRule != 'hoverStyle') {
          #{$styleRule}: #{$styleValue};
        }
      }

      &:hover {
        @each $hoverStyleRule, $hoverStyleValue in map.get($variantProperties, 'hoverStyle') {
          #{$hoverStyleRule}: #{$hoverStyleValue};
        }
      }

    }
  }

}

// Applied to `a` elements with the `button` class
a.button, input.button, button.button {
  @include button-input-style;
}

/*
  To add onto the button, you can define the following in your local
  a.button {
    &.super-custom-button {
      background-color: #fbff00;
      color: #333333;
    }
  }
*/

