@use "sass:math";

// Default p Properties
$default-element-p-properties:(
    color: getThemeProperty(TextColor, $component-typography-properties),
    fontFamily: getThemeProperty(fontText),
    fontWeight: 400,
    fontSizes: (
        desktop: (1em, getThemeProperty(TextLineHeight, $component-typography-properties)),
        tablet: (1em, getThemeProperty(TextLineHeight, $component-typography-properties)),
        phone: (1em, getThemeProperty(TextLineHeight, $component-typography-properties))
    ),
    margin: 0 0 math.div(getThemeProperty(layoutSpace), 2) 0,
    textTransform: getThemeProperty(TextTextTransform, $component-typography-properties),
    letterSpacing: getThemeProperty(TextLetterSpacing, $component-typography-properties)
);
// If $element-p-properties is set, lets merge into our defaults
$element-p-properties: $default-element-p-properties !default;
@if($element-p-properties){
  $element-p-properties: recursive-map-merge($default-element-p-properties, $element-p-properties);
}

p{
  color: getThemeProperty(color, $element-p-properties);
  font-family: getThemeProperty(fontFamily, $element-p-properties);
  font-weight: getThemeProperty(fontWeight, $element-p-properties);
  text-transform: getThemeProperty(textTransform, $element-p-properties);
  letter-spacing: getThemeProperty(letterSpacing, $element-p-properties);
  @include font-size(getThemeProperty(fontSizes, $element-p-properties));
}

.fw-typography-spacing{
  p{
    margin: getThemeProperty(margin, $element-p-properties);
  }
}
